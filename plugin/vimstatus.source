"=================================================================
" MetaData
"=================================================================
" vim: set filetype=vim:


"=================================================================
" Include Guard
"=================================================================
let g:Jvim#vimstatus#loaded = get(g:, 'Jvim#vimstatus#loaded', 0)
if (g:Jvim#vimstatus#loaded)
    finish
endif
let g:Jvim#vimstatus#loaded=1


"=================================================================
" Colors / Highlight
"=================================================================
hi JStatus_Red ctermfg=167 ctermbg=239 guifg=#fb4934 guibg=#504945
 
hi JStatus_Normal  ctermfg=235 ctermbg=223 guifg=#282828 guibg=#ebdbb2
hi JStatus_Insert  ctermfg=235 ctermbg=142 guifg=#282828 guibg=#b8bb26
hi JStatus_Replace ctermfg=235 ctermbg=124 guifg=#282828 guibg=#cc241d
hi JStatus_Visual  ctermfg=235 ctermbg=172 guifg=#282828 guibg=#d79921

"hi JStatus_Command ctermfg=237 ctermbg=239 guifg=#3c3836 guibg=#504945

hi Cursor ctermfg=235 ctermbg=223 guifg=#282828 guibg=#ebdbb2 "cterm=reverse gui=reverse 
" Cursor gui=reverse guibg=NONE guifg=black ctermfg=white ctermbg=black

"highlight link Cursor TermCursor 


"=================================================================
" Cursor Shape and color
"=================================================================

if !has('nvim')
   let &t_SI = "\e[6 q"
   let &t_EI = "\e[2 q"

   let &t_SR = "\e[4 q"
endif

"Ps = 0  -> blinking block.
"Ps = 1  -> blinking block (default).
"Ps = 2  -> steady block.
"Ps = 3  -> blinking underline.
"Ps = 4  -> steady underline.
"Ps = 5  -> blinking bar (xterm).
"Ps = 6  -> steady bar (xterm).

set guicursor=n-v-c:block-Cursor/lCursor
set guicursor=ve:ver35-Cursor,
set guicursor=o:hor50-Cursor,
set guicursor=i-ci:ver25-Cursor/lCursor,
set guicursor=r-cr:hor20-Cursor/lCursor,
set guicursor=sm:block-Cursor-blinkwait175-blinkoff150-blinkon175


" default

"set gcr=a:block-blinkon0

" modes
"set gcr+=v:block-blinkon0
"set gcr+=o:

" modes with colors
"set gcr+=n-c:block-Cursor
"set gcr+=i-ci:ver25-blinkon10-JStatus_Insert
"set gcr+=r-cr:hor30-blinkon10-JStatus_Replace


"=================================================================
" Diffrent Status Line for active / inactive
"=================================================================

"function! s:RefreshStatus()
  "for nr in range(1, winnr('$'))
    "call setwinvar(nr, '&statusline', '%!Status(' . nr . ')')
  "endfor
"endfunction
"
"augroup status
  "autocmd!
  "autocmd VimEnter,WinEnter,BufWinEnter * call <SID>RefreshStatus()
"augroup END


"=================================================================
" vimstatus
"=================================================================
function! GitBranch()
    "echom expand('%')
    :silent let l:branch = system("git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'")
    "let l:branch = system("git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'")
    let l:branch = substitute(strpart(branch, 2), '\n', '', '')
    if l:branch != ''
        return l:branch." \ue0a0 "
    endif
    return l:branch
endfunction

function! SetGitBranch()
    let b:GitBranchVar=GitBranch()
    let &ro=&ro
endfunction

function! EchoGitStatus()
    echo b:GitBranchVar
endfunction

"autocmd BufEnter,BufWritePost,BufWinEnter
autocmd BufEnter,VimEnter,BufWinEnter * call SetGitBranch()
 

"=================================================================
" Helper functions
"=================================================================
"function! Head(val, head)
"    if a:val=='' | return '' | else | return a:head.a:val | endif
"endfunction
"
"function! Tail(val, tail)
"    if a:val=='' | return '' | else | return a:val.a:tail | endif
"endfunction

function! BraceWrap(val)
    if a:val=='' | return '' | else | return '['.a:val.']' | endif
endfunction

function! BufVarExists(var, val)
    "if exists(a:var) | return a:val | else | return '' | endif
    let &ro=&ro
    return get(b:, a:var, a:val)
endfunction

function! SyntaxItem()
    return BraceWrap(synIDattr(synID(line("."),col("."),1),"name"))
endfunction


"=================================================================
" VimStatus Line Function
"=================================================================
function! JvimLine()
    let l:M=mode()

    if l:M=='n'
        let l:line="%#JStatus_Normal#  Normal "

    elseif l:M=='i'
        let l:line="%#JStatus_Insert#  Insert "

    elseif l:M=='c'
        let l:line="%#JStatus_Command# Command "

    elseif l:M=='R'
        let l:line="%#JStatus_Replace# Replace "

    elseif l:M=='v'
        let l:line="%#JStatus_Visual#  Visual "

    else
        let l:line="%#WarningMsg#   ".l:M."     "
    endif


    let l:line .= ' %* '                  " Colors Reset
"    let l:line .= GitBranch()             " Git Branch Name
    if exists('b:GitBranchVar')
        let l:line .= b:GitBranchVar          " Git Branch Name
    endif
    let l:line .= '%f'                " Relative filename & modified (%F Fullpatth)
    let l:line .= '%<'                    " Trim line here if to long
    let l:line .= '%#JStatus_Red#'        " Color Red
    let l:line .= "%{&readonly?'RO':''}"  " Readonly RO
    let l:line .= "%{&mod?'+':''}"       " modified +
    let l:line .= '%* %#StatusLineNC# '      " Colors StatusLineNC
    let l:line .= '%y%( [%q%W]%) '        " [help], [Quickfix List], [Location List], [Preview]
    let l:line .= '[%{&ff}]'              " Line endings [unix]
    let l:line .=  '%='                   " Right Justification marker
"    let l:line .=  '[[%{v:register}]]'
"    let l:line .= SyntaxItem()            " Syntax highlight group under cursor
    let l:line .= "%{&spell?' âœŽ'.&spelllang : ''}"

    let l:line .= ' %* '                  " Colors Reset
    let l:line .= '%3l'                 " Line number %L for total lines
    let l:line .= ',%-3v'               " Col number
    let l:line .= ' %p%% %*'             " File Present
    let &ro=&ro
    return l:line
endfunc


"=================================================================
" VimStatus enable
"=================================================================
if (g:Jvim#vimstatus#enable)
    set laststatus=2                 " Always show the status line
    set showtabline=2                " Always show tabline, even if only one tab
    set showmode                     " Text

    set statusline=
    set statusline=%!JvimLine()
endif
